import { config } from './config';

export interface EmailOptions {
  to: string;
  subject: string;
  body?: string;
  htmlBody?: string;
  pdfBuffer?: ArrayBuffer;
  pdfFilename?: string;
}

export class EmailService {
  /**
   * Send email with optional PDF attachment
   * Note: This is a client-side implementation that would need a backend proxy
   * for actual SMTP functionality due to CORS restrictions
   */
  static async sendEmail(options: EmailOptions): Promise<boolean> {
    try {
      // For now, we'll create a structured email object that can be sent to a backend
      const emailData = {
        from: config.EMAIL_SENDER,
        to: options.to,
        subject: options.subject,
        body: options.body || '',
        htmlBody: options.htmlBody || '',
        pdfBuffer: options.pdfBuffer ? Array.from(new Uint8Array(options.pdfBuffer)) : null,
        pdfFilename: options.pdfFilename || 'Minutes_of_Meeting.pdf',
      };

      // This would typically be sent to your backend API
      // For now, we'll just log it and return success
      console.log('Email data prepared:', {
        to: emailData.to,
        subject: emailData.subject,
        hasPdf: !!emailData.pdfBuffer,
        htmlBody: emailData.htmlBody ? 'HTML email template generated' : 'No HTML body',
      });

      // Simulate email sending delay
      await new Promise(resolve => setTimeout(resolve, 1000));

      // TODO: Implement actual email sending through backend API
      // const response = await fetch('/api/send-email', {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify(emailData),
      // });

      return true;
    } catch (error) {
      console.error('Failed to send email:', error);
      return false;
    }
  }

  /**
   * Generate HTML email template for meeting minutes
   */
  static generateEmailTemplate(data: {
    meetingTopic: string;
    meetingDate: string;
    meetingTime: string;
    duration: string;
    speakerName: string;
    summary: string;
    momText: string;
    meetingLink?: string;
  }): string {
    return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meeting Minutes</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
        .content { background-color: #ffffff; padding: 20px; border-radius: 8px; }
        .footer { margin-top: 20px; padding: 20px; background-color: #f8f9fa; border-radius: 8px; font-size: 14px; color: #666; }
        h1 { color: #2c3e50; margin-bottom: 10px; }
        h2 { color: #34495e; margin-top: 20px; margin-bottom: 10px; }
        .meeting-details { margin: 15px 0; }
        .meeting-details strong { color: #2c3e50; }
        .summary { background-color: #e8f4fd; padding: 15px; border-radius: 5px; margin: 15px 0; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìã Meeting Minutes</h1>
            <div class="meeting-details">
                <strong>Topic:</strong> ${data.meetingTopic}<br>
                <strong>Date:</strong> ${data.meetingDate}<br>
                <strong>Time:</strong> ${data.meetingTime}<br>
                <strong>Duration:</strong> ${data.duration}<br>
                <strong>Speaker:</strong> ${data.speakerName}
            </div>
        </div>
        
        <div class="content">
            <h2>üìù Summary</h2>
            <div class="summary">
                ${data.summary}
            </div>
            
            <h2>üìÑ Detailed Minutes</h2>
            <div style="white-space: pre-wrap;">${data.momText}</div>
            
            ${data.meetingLink ? `
            <div style="margin-top: 20px; padding: 15px; background-color: #f0f8ff; border-radius: 5px;">
                <strong>Meeting Link:</strong> <a href="${data.meetingLink}" target="_blank">${data.meetingLink}</a>
            </div>
            ` : ''}
        </div>
        
        <div class="footer">
            <p>This email was automatically generated by Sync Essence AI.</p>
            <p>Please find the detailed minutes attached as a PDF document.</p>
        </div>
    </div>
</body>
</html>
    `;
  }
}
